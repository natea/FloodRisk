[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "floodrisk"
version = "0.1.0"
description = "Flood depth prediction system using machine learning and hydrological modeling"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "FloodRisk Development Team", email = "info@floodrisk.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Hydrology",
]
keywords = ["flood", "prediction", "machine learning", "hydrology", "geospatial", "pytorch"]
requires-python = ">=3.11"

dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "gdal>=3.6.0",
    "rasterio>=1.3.0",
    "fastapi>=0.95.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic>=1.10.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.2.0",
    "pytest-cov>=4.0.0",
    "black>=23.1.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.20.0",
    "jupyterlab>=3.6.0",
]
cloud = [
    "boto3>=1.26.0",
    "google-cloud-storage>=2.7.0",
    "azure-storage-blob>=12.14.0",
]

[project.scripts]
floodrisk = "floodrisk.cli:main"
floodrisk-train = "floodrisk.training.train:main"
floodrisk-predict = "floodrisk.prediction.predict:main"
floodrisk-api = "floodrisk.api.main:main"

[project.urls]
Homepage = "https://github.com/yourusername/floodrisk"
Documentation = "https://floodrisk.readthedocs.io/"
Repository = "https://github.com/yourusername/floodrisk"
"Bug Tracker" = "https://github.com/yourusername/floodrisk/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
floodrisk = ["data/*.json", "configs/*.yaml", "templates/*.html"]

# Black configuration
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["floodrisk"]
known_third_party = [
    "torch", "torchvision", "numpy", "scipy", "pandas",
    "gdal", "rasterio", "fiona", "shapely", "geopandas",
    "fastapi", "uvicorn", "pydantic", "sqlalchemy",
    "pytest", "matplotlib", "seaborn", "plotly"
]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "gdal.*",
    "osgeo.*",
    "rasterio.*",
    "fiona.*",
    "shapely.*",
    "geopandas.*",
    "richdem.*",
    "whitebox.*",
    "pyflwdir.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--maxfail=1",
    "--color=yes",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "external: marks tests that require external services",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore:.*GDAL.*:RuntimeWarning",
    "ignore:.*shapely.*:RuntimeWarning",
    "ignore:.*torch.*:UserWarning",
]

# Flake8 configuration (in setup.cfg or tox.ini)
# Note: flake8 doesn't support pyproject.toml yet