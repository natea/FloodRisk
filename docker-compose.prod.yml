version: '3.8'

# Production Docker Compose configuration
services:
  # Main application (production build)
  app:
    build:
      context: .
      target: production
    container_name: floodrisk_app_prod
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://flooduser:${POSTGRES_PASSWORD}@postgres:5432/floodrisk
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ENVIRONMENT=production
      - DEBUG=false
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - app_static:/app/static
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - floodrisk-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database (production configuration)
  postgres:
    image: postgis/postgis:15-3.3
    container_name: floodrisk_postgres_prod
    environment:
      - POSTGRES_DB=floodrisk
      - POSTGRES_USER=flooduser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flooduser -d floodrisk"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - floodrisk-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis (production configuration with persistence)
  redis:
    image: redis:7-alpine
    container_name: floodrisk_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data_prod:/data
      - ./config/redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - floodrisk-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Celery worker (production)
  worker:
    build:
      context: .
      target: production
    container_name: floodrisk_worker_prod
    command: celery -A src.tasks.celery worker --loglevel=warning --concurrency=4
    environment:
      - DATABASE_URL=postgresql://flooduser:${POSTGRES_PASSWORD}@postgres:5432/floodrisk
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ENVIRONMENT=production
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models:ro
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - floodrisk-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Celery beat scheduler (production)
  scheduler:
    build:
      context: .
      target: production
    container_name: floodrisk_scheduler_prod
    command: celery -A src.tasks.celery beat --loglevel=warning
    environment:
      - DATABASE_URL=postgresql://flooduser:${POSTGRES_PASSWORD}@postgres:5432/floodrisk
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ENVIRONMENT=production
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - floodrisk-network

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: floodrisk_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - app_static:/var/www/static
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - floodrisk-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Prometheus monitoring (production)
  prometheus:
    image: prom/prometheus:latest
    container_name: floodrisk_prometheus_prod
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - floodrisk-network

  # Grafana dashboards (production)
  grafana:
    image: grafana/grafana:latest
    container_name: floodrisk_grafana_prod
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/prod:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - floodrisk-network

  # Log aggregation (production)
  loki:
    image: grafana/loki:latest
    container_name: floodrisk_loki_prod
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data_prod:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - floodrisk-network

  # Log shipping
  promtail:
    image: grafana/promtail:latest
    container_name: floodrisk_promtail_prod
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
      - ./logs:/var/log/app
      - /var/log:/var/log/host:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - floodrisk-network

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: floodrisk_backup_prod
    environment:
      - POSTGRES_USER=flooduser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=floodrisk
      - PGHOST=postgres
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: /backup.sh
    depends_on:
      - postgres
    restart: "no"  # Run manually or via cron
    networks:
      - floodrisk-network

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local
  loki_data_prod:
    driver: local
  app_static:
    driver: local

networks:
  floodrisk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Production deployment configurations
x-deploy-defaults: &deploy-defaults
  restart_policy:
    condition: on-failure
    delay: 5s
    max_attempts: 3
    window: 120s
  update_config:
    parallelism: 1
    delay: 10s
    failure_action: rollback
    order: start-first