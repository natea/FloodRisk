[tool:pytest]
# Pytest configuration for FloodRisk integration tests

# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --durations=10
    --cov=src
    --cov-report=html
    --cov-report=term-missing
    --cov-fail-under=80

# Markers for test categorization
markers =
    slow: marks tests as slow (deselect with -m "not slow")
    gpu: marks tests that require GPU acceleration
    integration: marks tests as integration tests
    production: marks tests for production validation
    preprocessing: marks tests for data preprocessing
    model: marks tests for model functionality
    api: marks tests for API endpoints
    validation: marks tests for validation functionality
    e2e: marks tests for end-to-end workflows

# Test timeout (in seconds)
timeout = 300

# Ignore warnings from dependencies
filterwarnings =
    ignore::UserWarning:torch.*
    ignore::RuntimeWarning:numpy.*
    ignore::FutureWarning:sklearn.*
    ignore::DeprecationWarning:rasterio.*
    ignore::PendingDeprecationWarning

# Logging configuration
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Parallel execution settings
# Uncomment to enable parallel testing with pytest-xdist
# addopts = -n auto

# Coverage settings
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.: